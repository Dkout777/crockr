Protocol for connecting client and server with websockets


# Establishing connection between server and client
1. Client makes request to server over http to get upgraded to a websocket. Client must send its id to the client as part of the request
2. Server receives request. It verifies if a client with that ID has an open session and if that session already has an open connection. If session exists and no open connection exists, then open the websocket and start the session. Otherwise, emit some form of error back to the client (this needs to be elaborated on)
3. Client receives connection open response. If there is ui element to show connection status, update it now


# Client sends data to the server
Client sends a message to the server, with data formatted as a json string. Data from client to server will have the following format:
{
  "id": <client uuid>,
  "dataType: <predefined message type>
  "data": {
    <data following predefined data format goes here>
  }
}

Data object will be predefined with TypeScript to ensure that the correct format is used. On client end, data will be parsed into a json object, and depending on the dataType received, will be sent to the correct handler. 

# Server sends data to the client
When server sends data to the client, it will be sent in a similar format to how the client sends data to the server. Data will be sent to the client with the following format: 
{
  "id": All zeroes,
  "dataType: <predefined message type>
  "data": {
    <data following predefined data format goes here>
  }
}

# Server checks if client is still active
Every X seconds, the server will check if the client is still active by sending a ping request (containing the ID of the client?) to the server. If pong response is not received within X time, then server will mark the connection as errored and will attempt to reinitiate the connection following X procedure. 

# Client checks if it is still connected to the server
Every X seconds, the client will check if it still has a good connection to the server by sending a ping request to the server. Before sending the ping, client will activate the pong event callback. This event should be disabled before sending pong to ensure that no weird errors occur. If no pong response received from server within X seconds, then the conection is no longer good and the UI should reflect these changes. 

# Client closes the connection
The client can send a close request to the server to close the connection. Client must send close request with a status code of 1000 to indicate a normal close request. Server will allow the request and complete the closing of the connection. 

# Server closes the connection
If the server wants to close the connection (i.e. host has ended session), server sends a close request to the client with status code of 1000 to indicate normal close request. Client closes connection (and probably displays message on page that the session has ended). Server deletes websocket variable?

# Client closes the page or navigates away
When the client changes pages or closes the browser before closing the connection, the client must send a close request to the server with a status code of 1001. The server should then finish the close event. 

